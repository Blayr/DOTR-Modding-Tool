using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DOTR_MODDING_TOOL.Classes
{
    public static class VanillaMapBytes
    {

        public static Dictionary<int, byte[]> Maps = InitialiseLinesDictionary();


        private static Dictionary<int, byte[]> InitialiseLinesDictionary()
        {
            string data = "7777777777777777777777777777777777777777777777777\n0333330338783338777833777773387778333878330333330\n0000000000000000000000000001000000001001000000000\n1111111181818118181811818181181818118181811111111\n1111111188188118111811118111181118118818811111111\n1944444994999444491944999994491944449994994444491\n1111111111133111111314144434313333331133333333333\n5555500555550055555555555555555555500555550055555\n7777777988888503341150888889033411598888857777777\n6666666666666667666768788878474447433333333333333\n2222222233333223333322333332233333223333322222222\n7727773777377737777277727777777737773777727772777\n7777777333333300000004444444111111155555557777777\n1222221122222112222211222221122222112222211222221\n3344444344444444444444444444444443344444334444333\n6512034651203465120346512034651203465120346512034\n4449555444955544495559999999111900011190001119000\n3333333333333348888844855584485558428858822211122\n9000009099099009909900009000099099009909909000009\n4302157215769876984308430215021576957698439843021\n0333330338983338999833999993389998333898330333330\n0333330338583338555833555553385558333858330333330\n7777777777777777777777777777777777777777777777777\n0000000000000000000000000000000000000000000000000\n1111111111111111111111111111111111111111111111111\n2222222222222222222222222222222222222222222222222\n3333333333333333333333333333333333333333333333333\n4444444444444444444444444444444444444444444444444\n5555555555555555555555555555555555555555555555555\n6666666666666666666666666666666666666666666666666\n9999999999999999999999999999999999999999999999999\n0333333333330033333000333333433033333330333333333\n1444448184444814844488448448844484184444818444441\n1119444111944411194441119444111944411194441119444\n2223333222333322233332228666000066600006660000666\n7444447184448511848551118555118385518333857333337\n3332000333200033320009999999555555555555555555555\n4442222184828211444225818482551144458581845555114\n8555888858533385858830009333088585800058588885558\n8886888222633388868884446111888688800065558886888\n5584444558444455848885557222888182211118221111822\n4444444111111111111114444444444444411111111111111\n6666666838383833333331919191111111184848484444444\n1003355188888248777774877777687777768877779987777\n2015577620158746201873462087334628799888877787777\n8877888888888888888888888888888888888888888887788";
            Dictionary<int, byte[]> linesDictionary = new Dictionary<int, byte[]>();

            string[] lines = data.Split('\n');

            for (int i = 0; i < lines.Length; i++)
            {
                byte[] bytes = new byte[lines[i].Length];

                // Convert the character to a byte value 
                for (int j = 0; j < lines[i].Length; j++)
                {
                    bytes[j] = byte.Parse(lines[i][j].ToString());
                }
                linesDictionary.Add(i, bytes);
            }

            return linesDictionary;
        }
    }
}
