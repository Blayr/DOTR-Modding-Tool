namespace DOTR_Modding_Tool
{
    using DiscUtils.Iso9660;
    using DOTR_MODDING_TOOL.Classes;
    using GameplayPatches;
    using NAudio.MediaFoundation;
    using NAudio.Wave;
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using System.Windows.Forms;

    public partial class MainForm : Form
    {
        public static int[] SpecialThreeInARows = Enumerable.Repeat(671, 30).ToArray();
        public static int[] SpecialSlotRewards = Enumerable.Repeat(0, 30).ToArray();
        Patcher patcher;
        string MusicDirectory = Path.Combine(Directory.GetCurrentDirectory(), "Music");

        #region Map
        Terrain selectedTile = Terrain.NORMAL;
        DotrMap currentMap;
        private bool isClickAndDrag = false;
        bool haveMapsLoaded = false;
        #endregion

        #region Music
        public Dictionary<int, string> DuelistMusic;
        private int CurrentDuelistMusicSelected;
        private string CurrentSongSelected;
        #endregion

        #region Pointers
        static int LockTeamSelection = 0x1ec7f0; // lock the selection options
        static int LockTeamSelection2 = 0x1ec7d8;
        static int SelectWhiteDefault = 0x1ef260;
        static int MakeWhiteStart = 0x179074; //Makes white always start
        static int AllowRitualFusionsHand = 0x23e794; //Allows non enchant fusions in hand
        static int AllowRitualFusionField = 0x2180a4; //Allows non enchant fusions on field
        static int RemoveRngFromSlots = 0x2212b4;
        static int ExpandZoom = 0x1a2d00;
        static int ChangeTerrainValues = 0x236590;
        //Reincarnation
        static int ChangeReincarnationAmountPtr = 0x1f8290;
        static int RemoveLoseCardOnReincarnation = 0x189f1c;

        //Allow 5 digits for LP
        static int MoreDigitsOnScreen = 0x181cd0;
        //Emulator Camera fixes
        static int EmulatorCameraFix1 = 0x1a9428;
        static int EmulatorCameraFix2 = 0x1a2c78;
        static int EmulatorCameraFix3 = 0x1a2c80;
        static int EmulatorCameraSpyFix1 = 0x225edc;
        static int EmulatorCameraSpyFix2 = 0x225efc;
        //BELOW HERE REQUIRE FAST INTRO TO BE ENABLED:
        //Remove Dc Requirements
        static int TaTutoDbgInit34 = 0x145f60;
        
        static int TaTutoFocusUnit33 = 0x1446f0;
        static int TaTutoFocusInit34 = 0x145ca0;
        //TutorialStuff
        static int TaTutoSetDeck35 = 0x148420;
        #endregion
        bool FastIntroBool = false;
        //Slots
        static int AddSlotRewardsPtr = 0x221610;
        static int TaTutoFocusUnit032 = 0x142610;
        //Music
        static int AddCustomMusicPtr = 0x17ac58;
        static int TaTuto_DrawTrapArea = 0x24f800;
        static int SlotTrackPtr = 0x17ae34;
        private WaveOutEvent waveOut;
        private Mp3FileReader mp3Reader;
        private bool isMusicPlaying = false;
        
        private void loadBatzpupMods()
        {
            this.InitDataGridView();
            //HandleLoadMaps();
            LoadDefaultMusic();
            waveOut = new WaveOutEvent();
            waveOut.Volume = 0.1f;
            patcher = new Patcher(dataAccess);
            ReadBatzpupModsFromIso();


        }

        private void ReadBatzpupModsFromIso()
        {
            cbFastIntro.Checked = new GameplayPatches.FastIntro().IsApplied();
            cbAIInputFix.Checked = dataAccess.CheckIfPatchApplied(0x246400, new byte[8] { 0xc8, 0xe0, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00 });
            cbEmulatorCameraFix.Checked = dataAccess.CheckIfPatchApplied(EmulatorCameraFix1, new byte[4] { 0x00, 0x38, 0x02, 0x24 });
            cbExpandedZoom.Checked = dataAccess.CheckIfPatchApplied(ExpandZoom, new byte[12] { 0x71, 0x02, 0x41, 0x28, 0x04, 0x00, 0x20, 0x50, 0x71, 0x02, 0x03, 0x24 });
            cbRemoveRNGFromSlots.Checked = dataAccess.CheckIfPatchApplied(RemoveRngFromSlots, new byte[4] { 0x01, 0x00, 0x60, 0xa2 });
            cbAllowAllCustomDuels.Checked = dataAccess.CheckIfPatchApplied(0x197328, new byte[8] { 0x7c, 0xd1, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00 });
            cbRemoveNegetiveXP.Checked = new GameplayPatches.NoNegativeXP().IsApplied();
            cbNoDCRequirementPostGame.Checked = new GameplayPatches.RemoveDCRequirements().IsApplied();
            cbKeepReincarnatedCard.Checked = dataAccess.CheckIfPatchApplied(RemoveLoseCardOnReincarnation, new byte[4] { 0x00, 0x00, 0x00, 0x00 });
            cbAllFusions.Checked = dataAccess.CheckIfPatchApplied(Patcher.AllowAllHandFusions.Offset, Patcher.AllowAllHandFusions.Patch) || dataAccess.CheckIfPatchApplied(Patcher.AllowAllFieldFusions.Offset, Patcher.AllowAllFieldFusions.Patch);
            ReadValuesFromIso();

        }

        private void ReadValuesFromIso()
        {
            cbSideFirst.Checked = dataAccess.CheckIfPatchApplied(0x1a7b08, new byte[4] { 0x00, 0xff, 0x23, 0x92 });
            if (cbSideFirst.Checked)
            {
                byte[] value = dataAccess.ReadBytes(MakeWhiteStart + 28, 1);
                cboSideFirst.SelectedIndex = Convert.ToInt32(value[0]);
            }
            //Check New Game Side
            cbForceNewGameSide.Checked = dataAccess.CheckIfPatchApplied(LockTeamSelection2, new byte[4] { 0x01, 0x00, 0x05, 0x24 });
            if (cbForceNewGameSide.Checked)
            {
                int WhiteTeamForce = dataAccess.ReadBytes(LockTeamSelection + 2, 1)[0];
                if (WhiteTeamForce == 0x20)
                {
                    int RedTeamForce = dataAccess.ReadBytes(LockTeamSelection - 2, 1)[0];
                    if (RedTeamForce == 0x20)
                    {
                        MessageBox.Show("A patched jump with vanilla bytes");
                    }
                    else
                    {
                        cboForceNewGameSide.SelectedIndex = 0;
                    }
                }
                else
                {
                    cboForceNewGameSide.SelectedIndex = 1;
                }
            }
            //
            int CapValue = BitConverter.ToUInt16(dataAccess.ReadBytes(0x2209d4, 2), 0);
            if (CapValue != 10000)
            {
                cbLPCap.Checked = true;
                numLPCap.Value = CapValue - 1;
            }
            int reincarnationAmount = dataAccess.ReadBytes(Patcher.ChangeReincarnationAmount.Offset, 1)[0];
            if (reincarnationAmount != 5)
            {
                cbReincarnationCount.Checked = true;
                numReincarnationCount.Value = reincarnationAmount;
            }
            cbTerrainChangeEnabled.Checked = !dataAccess.CheckIfPatchApplied(ChangeTerrainValues, new byte[16] { 0x0c, 0xfe, 0xb5, 0x26, 0x01, 0x00, 0x03, 0x24, 0x04, 0x00, 0x43, 0x50, 0xf4, 0x01, 0xb5, 0x26 });
            if (cbTerrainChangeEnabled.Checked)
            {
                numChangeTerrainValue.Value = Math.Abs(BitConverter.ToInt16(dataAccess.ReadBytes(ChangeTerrainValues, 2), 0));
            }

            cbAddAddtionalSlotRewards.Checked = dataAccess.CheckIfPatchApplied(AddSlotRewardsPtr, new byte[8] { 0x44, 0xc9, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00 });
            if (cbAddAddtionalSlotRewards.Checked)
            {
                byte[] bytes = dataAccess.ReadBytes(TaTutoFocusUnit032, 768);
                int j = 0;
                for (int i = 24; j < 30; i += 12)
                {
                    byte[] valueBytes = new byte[2];
                    Array.Copy(bytes, i, valueBytes, 0, 2);
                    SpecialThreeInARows[j] = BitConverter.ToUInt16(valueBytes, 0);
                    j++;
                }
                j = 0;
                for (int i = 400; j < 30; i += 12)
                {
                    byte[] valueBytes = new byte[2];
                    Array.Copy(bytes, i, valueBytes, 0, 2);
                    SpecialSlotRewards[j] = BitConverter.ToUInt16(valueBytes, 0);
                    j++;
                }
                LoadSlotsData();

            }
            cbUseCustomMusic.Checked = dataAccess.CheckIfPatchApplied(AddCustomMusicPtr, new byte[8] { 0xc0, 0xfd, 0x09, 0x08, 0x15, 0x00, 0x03, 0x24 });

            if (cbUseCustomMusic.Checked)
            {
                int j = 0;
                byte[] bytes = dataAccess.ReadBytes(TaTuto_DrawTrapArea, 288);
                for (int i = 12; j < 22; i += 12)
                {
                    string track = lbMusicTrack.Items[(int)(bytes[i] - 1)].ToString();
                    DuelistMusic[j] = track;
                    j++;
                }
            }
        }

        private void btnLoadDefaultMaps_Click(object sender, EventArgs e)
        {
            LoadDefaultMaps();
        }
        void LoadSlotsData()
        {

            for (int i = 0; i < 30; i++)
            {
                DataGridViewComboBoxCell threeCell = dgvSlotRewards.Rows[i].Cells[1] as DataGridViewComboBoxCell;
                threeCell.Value = threeCell.Items[SpecialThreeInARows[i]];
                DataGridViewComboBoxCell rewardCell = dgvSlotRewards.Rows[i].Cells[2] as DataGridViewComboBoxCell;
                rewardCell.Value = rewardCell.Items[SpecialSlotRewards[i]];
            }
        }

        private void HandleLoadMaps()
        {
            if (!haveMapsLoaded)
            {
                SetDoubleBuffered(scBatzpupEditMapTiles);
                SetDoubleBuffered(scBatzpupEditMapTiles.Panel2);
                RefreshEditor.Interval = 1000 / 60;
                RefreshEditor.Enabled = true;
                scBatzpupEditMapTiles.IsSplitterFixed = true;
                scBatzpupEditMapPallete.IsSplitterFixed = true;
                scBatzpupEditDuelMapSelect.IsSplitterFixed = true;
                dataAccess.LoadMapsFromIso();
                currentMap = dataAccess.maps[0];
                lbDuelistMaps.SelectedIndex = 0;
                haveMapsLoaded = true;
            }
        }

        private void tbBatzpups_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (tbBatzpup.SelectedIndex == 2)
            {
                HandleLoadMaps();
            }
            if (isMusicPlaying)
            {
                if (tbBatzpup.SelectedIndex != 3)
                {
                    if (waveOut.PlaybackState != PlaybackState.Stopped)
                    {
                        waveOut.Stop();
                        mp3Reader?.Dispose();
                        btnToggleMusic.Text = "Play";
                        isMusicPlaying = false;
                    }
                  
                    
                }
            }
        }

        private void SlotRewardsDataGridView_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (e.Control is DataGridViewComboBoxEditingControl)
            {
                ((ComboBox)e.Control).DropDownStyle = ComboBoxStyle.DropDown;
                ((ComboBox)e.Control).AutoCompleteSource = AutoCompleteSource.ListItems;
                ((ComboBox)e.Control).AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.Suggest;
            }
        }

        private void InitDataGridView()
        {
            dgvSlotRewards.Rows.Add(30);
            for (int i = 0; i < dgvSlotRewards.RowCount; i++)
            {
                dgvSlotRewards.Rows[i].Cells[0].Value = i;
                DataGridViewComboBoxCell threeCell = dgvSlotRewards.Rows[i].Cells[1] as DataGridViewComboBoxCell;
                threeCell.Value = threeCell.Items[671];
                DataGridViewComboBoxCell rewardCell = dgvSlotRewards.Rows[i].Cells[2] as DataGridViewComboBoxCell;
                rewardCell.Value = rewardCell.Items[0];
            }
            dgvSlotRewards.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            dgvSlotRewards.Columns[0].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            dgvSlotRewards.Columns[1].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            dgvSlotRewards.Columns[2].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
        }
        private void BindSlotRewards()
        {

            for (int i = 0; i < dgvSlotRewards.RowCount; i++)
            {

                DataGridViewComboBoxCell threeCell = dgvSlotRewards.Rows[i].Cells[1] as DataGridViewComboBoxCell;
                int value = threeCell.Items.IndexOf(threeCell.Value);
                SpecialThreeInARows[i] = value;

                DataGridViewComboBoxCell rewardCell = dgvSlotRewards.Rows[i].Cells[2] as DataGridViewComboBoxCell;
                value = rewardCell.Items.IndexOf(rewardCell.Value);
                SpecialSlotRewards[i] = value;
            }


        }
        public void SetDoubleBuffered(Control c)
        {
            PropertyInfo pi = typeof(Control).GetProperty("DoubleBuffered",
                BindingFlags.NonPublic | BindingFlags.Instance);
            pi.SetValue(c, true, null);
        }

        private void PictureBox_Click(object sender, EventArgs e)
        {
            PictureBox clickedPictureBox = (PictureBox)sender;
            TableLayoutPanelCellPosition cellPosition = tbPallete.GetCellPosition(clickedPictureBox);
            int column = cellPosition.Column;
            int row = cellPosition.Row;
            int value = row * tbPallete.ColumnCount + column;
            // Do something with the column and row values, such as displaying them
            ChangeSelectedTile((Terrain)value);
        }
        void ChangeSelectedTile(Terrain terrain)
        {
            selectedTile = terrain;
            pbSelectedTile.Image = MapTile.GetImageFromTerrain(terrain);
        }

        private void LoadDefaultMaps()
        {
            for (int i = 0; i < dataAccess.maps.Length; i++)
            {
                dataAccess.maps[i] = new DotrMap(VanillaMapBytes.Maps[i]);
            }
            currentMap = dataAccess.maps[0];
            lbDuelistMaps.SelectedIndex = 0;
        }
        private void splitContainer4_Panel2_MouseDown(object sender, MouseEventArgs e)
        {
            // Determine the clicked tile based on the mouse position
            for (int i = 0; i < currentMap.tiles.Length; i++)
            {
                MapTile tile = currentMap.tiles[i];
                if (tile.GetRect().Contains(e.Location))
                {
                    isClickAndDrag = true;
                    break;
                }
            }
        }

        private void MapEditor_MouseMove(object sender, MouseEventArgs e)
        {
            for (int i = 0; i < currentMap.tiles.Length; i++)
            {
                if (currentMap.GetTile(i).GetRect().Contains(e.Location))
                {
                    currentMap.SetTileHovered(i, true);
                }
                else
                {
                    currentMap.SetTileHovered(i, false);
                }
            }
            if (e.Button == MouseButtons.Left)
            {
                if (isClickAndDrag)
                {
                    // Update the image of the tiles as the mouse moves over them
                    for (int i = 0; i < currentMap.tiles.Length; i++)
                    {
                        MapTile tile = currentMap.tiles[i];
                        if (tile.GetRect().Contains(e.Location))
                        {

                            currentMap.SetTile(i, selectedTile);
                        }
                    }
                }
            }
            if (e.Button == MouseButtons.Right)
            {
                if (isClickAndDrag)
                {
                    // Update the image of the tiles as the mouse moves over them
                    for (int i = 0; i < currentMap.tiles.Length; i++)
                    {
                        MapTile tile = currentMap.tiles[i];
                        if (tile.GetRect().Contains(e.Location))
                        {

                            currentMap.SetTile(i, Terrain.NORMAL);
                        }
                    }
                }
            }
        }

        private void MapEditor_MouseUp(object sender, MouseEventArgs e)
        {
            isClickAndDrag = false;
        }
        private void lbDuelistMaps_SelectedIndexChanged(object sender, EventArgs e)
        {
            currentMap = dataAccess.maps[lbDuelistMaps.SelectedIndex];
            if (lbDuelistMaps.SelectedIndex != -1) // Check if an item is selected
            {
                string selectedText = lbDuelistMaps.Items[lbDuelistMaps.SelectedIndex].ToString();
                lblDotrMap.Text = $"Current Map: {selectedText}";
            }
        }
        private void RefreshEditor_Tick(object sender, EventArgs e)
        {
            scBatzpupEditMapTiles.Panel2.Invalidate();
        }

        private void pbForest_Click(object sender, EventArgs e)
        {
            PictureBox_Click(sender, e);
        }

        private void pbWasteland_Click(object sender, EventArgs e)
        {
            PictureBox_Click(sender, e);
        }

        private void pbMountain_Click(object sender, EventArgs e)
        {
            PictureBox_Click(sender, e);
        }

        private void pbMeadow_Click(object sender, EventArgs e)
        {
            PictureBox_Click(sender, e);
        }

        private void pbSea_Click(object sender, EventArgs e)
        {
            PictureBox_Click(sender, e);
        }

        private void pbDark_Click(object sender, EventArgs e)
        {
            PictureBox_Click(sender, e);
        }

        private void pbToon_Click(object sender, EventArgs e)
        {
            PictureBox_Click(sender, e);
        }

        private void pbNormal_Click(object sender, EventArgs e)
        {
            PictureBox_Click(sender, e);
        }

        private void pbLab_Click(object sender, EventArgs e)
        {
            PictureBox_Click(sender, e);
        }

        private void pbCrush_Click(object sender, EventArgs e)
        {
            PictureBox_Click(sender, e);
        }
        private void EditMap_Paint(object sender, PaintEventArgs e)
        {
            currentMap.Draw(e.Graphics, 75, 75);
        }
        private void BatzpupSaveButton_Click(object sender, EventArgs e)
        {
            HandleMainSave();
            SaveMaps();
            SaveSlots();
            MessageBox.Show("Changes Save Successfully");
        }



        private void HandleMainSave()
        {
            ChangeSlotMusic();
            
            if (IsUsingFastIntroMods())
            {
                cbFastIntro.Checked = true;
                FastIntroBool = true;
                NopTutorialsForOtherMods();
            }
            else
            {
                cbFastIntro.Checked = false;
                FastIntroBool = false;
                RestoreNoppedTutorials();
            }
            if (cbAIInputFix.Checked)
            {
                dataAccess.ApplyPatch(0x246400, new byte[8] { 0xc8, 0xe0, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00 });
                //Overwrites nopped bytes.
                dataAccess.ApplyPatch(TaTutoSetDeck35, new byte[156] { 0x02, 0x00, 0x03, 0x92, 0x06, 0x00, 0x0b, 0x24, 0x21, 0x00, 0x6b, 0x14, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x4c, 0x30, 0x04, 0x00, 0x0d, 0x96, 0xff, 0x00, 0xb8, 0x31, 0x23, 0x70, 0x98, 0x01, 0x1b, 0x00, 0xc0, 0x15, 0x00, 0x00, 0x00, 0x00, 0x03, 0x62, 0x02, 0x00, 0x03, 0xc2, 0x0d, 0x00, 0x22, 0x70, 0x98, 0x01, 0x16, 0x00, 0xc0, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0d, 0x8e, 0x01, 0x00, 0x09, 0x24, 0x0f, 0x00, 0xa9, 0x11, 0x02, 0x00, 0x09, 0x24, 0x10, 0x00, 0x0d, 0x92, 0x0c, 0x00, 0xa9, 0x15, 0x00, 0x00, 0x00, 0x00, 0x50, 0x7d, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x57, 0x00, 0x4d, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xad, 0x35, 0x57, 0x00, 0x4d, 0xa0, 0x60, 0x01, 0x28, 0x26, 0x20, 0x00, 0x09, 0x24, 0x00, 0x00, 0x09, 0xa5, 0xc1, 0xda, 0x09, 0x08, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x32, 0xff, 0x00, 0x83, 0x32, 0xc2, 0xd8, 0x09, 0x08 });
            }
            else
            {
                //Restoring Nopped bytes is down elsewhere
                dataAccess.ApplyPatch(0x246400, new byte[8] { 0xff, 0xff, 0x8a, 0x32, 0xff, 0x00, 0x83, 0x32 });

            }

            new GameplayPatches.FastIntro().ApplyOrRemove(cbFastIntro.Checked);

            if (cbAllFusions.Checked)
            {
                patcher.applyPatch(Patcher.AllowAllHandFusions);
                patcher.applyPatch(Patcher.AllowAllFieldFusions);
            }
            else
            {
                if (patcher.CheckIfPatchApplied(Patcher.AllowAllHandFusions) || patcher.CheckIfPatchApplied(Patcher.AllowAllFieldFusions))
                {
                    patcher.undoPatch(Patcher.AllowAllHandFusions);
                    patcher.undoPatch(Patcher.AllowAllFieldFusions);
                }

            }
            if (cbEmulatorCameraFix.Checked)
            {
                dataAccess.ApplyPatch(EmulatorCameraFix1, new byte[4] { 0x00, 0x38, 0x02, 0x24 });
                dataAccess.ApplyPatch(EmulatorCameraFix2, new byte[4] { 0x00, 0x38, 0x41, 0x28 });
                dataAccess.ApplyPatch(EmulatorCameraFix3, new byte[4] { 0x00, 0x38, 0x03, 0x24 });
                dataAccess.ApplyPatch(EmulatorCameraSpyFix1, new byte[4] { 0x00, 0x38, 0x03, 0x24 });
                dataAccess.ApplyPatch(EmulatorCameraSpyFix2, new byte[4] { 0x00, 0x38, 0x03, 0x24 });
            }
            else
            {
                dataAccess.ApplyPatch(EmulatorCameraFix1, new byte[4] { 0x00, 0x40, 0x02, 0x24 });
                dataAccess.ApplyPatch(EmulatorCameraFix2, new byte[4] { 0x00, 0x40, 0x41, 0x28 });
                dataAccess.ApplyPatch(EmulatorCameraFix3, new byte[4] { 0x00, 0x40, 0x03, 0x24 });
                dataAccess.ApplyPatch(EmulatorCameraSpyFix1, new byte[4] { 0x00, 0x40, 0x03, 0x24 });
                dataAccess.ApplyPatch(EmulatorCameraSpyFix2, new byte[4] { 0x00, 0x40, 0x03, 0x24 });
            }
            if (cbExpandedZoom.Checked)
            {
                dataAccess.ApplyPatch(ExpandZoom, new byte[12] { 0x71, 0x02, 0x41, 0x28, 0x04, 0x00, 0x20, 0x50, 0x71, 0x02, 0x03, 0x24 });
            }
            else
            {
                dataAccess.ApplyPatch(ExpandZoom, new byte[12] { 0xf4, 0x01, 0x41, 0x28, 0x04, 0x00, 0x20, 0x50, 0xf4, 0x01, 0x03, 0x24 });
            }
            new GameplayPatches.NoNegativeXP().ApplyOrRemove(cbRemoveNegetiveXP.Checked);

            if (cbRemoveRNGFromSlots.Checked)
            {
                dataAccess.ApplyPatch(RemoveRngFromSlots, new byte[4] { 0x01, 0x00, 0x60, 0xa2 });
            }
            else
            {
                dataAccess.ApplyPatch(RemoveRngFromSlots, new byte[4] { 0x01, 0x00, 0x62, 0xa2 });
            }
            if (cbUseCustomMusic.Checked)
            {
                byte[] bytes = new byte[288] { 0x3c, 0x01, 0xf8, 0x8c, 0x00, 0x00, 0x03, 0x24, 0x43, 0x00, 0x03, 0x13, 0x07, 0x00, 0x06, 0x24, 0x01, 0x00, 0x03, 0x24, 0x40, 0x00, 0x03, 0x13, 0x10, 0x00, 0x06, 0x24, 0x02, 0x00, 0x03, 0x24, 0x3d, 0x00, 0x03, 0x13, 0x08, 0x00, 0x06, 0x24, 0x03, 0x00, 0x03, 0x24, 0x3a, 0x00, 0x03, 0x13, 0x08, 0x00, 0x06, 0x24, 0x04, 0x00, 0x03, 0x24, 0x37, 0x00, 0x03, 0x13, 0x08, 0x00, 0x06, 0x24, 0x05, 0x00, 0x03, 0x24, 0x34, 0x00, 0x03, 0x13, 0x08, 0x00, 0x06, 0x24, 0x06, 0x00, 0x03, 0x24, 0x31, 0x00, 0x03, 0x13, 0x08, 0x00, 0x06, 0x24, 0x07, 0x00, 0x03, 0x24, 0x2e, 0x00, 0x03, 0x13, 0x08, 0x00, 0x06, 0x24, 0x08, 0x00, 0x03, 0x24, 0x2b, 0x00, 0x03, 0x13, 0x08, 0x00, 0x06, 0x24, 0x09, 0x00, 0x03, 0x24, 0x28, 0x00, 0x03, 0x13, 0x08, 0x00, 0x06, 0x24, 0x0a, 0x00, 0x03, 0x24, 0x25, 0x00, 0x03, 0x13, 0x08, 0x00, 0x06, 0x24, 0x0b, 0x00, 0x03, 0x24, 0x22, 0x00, 0x03, 0x13, 0x09, 0x00, 0x06, 0x24, 0x0c, 0x00, 0x03, 0x24, 0x1f, 0x00, 0x03, 0x13, 0x09, 0x00, 0x06, 0x24, 0x0d, 0x00, 0x03, 0x24, 0x1c, 0x00, 0x03, 0x13, 0x09, 0x00, 0x06, 0x24, 0x0e, 0x00, 0x03, 0x24, 0x19, 0x00, 0x03, 0x13, 0x23, 0x00, 0x06, 0x24, 0x0f, 0x00, 0x03, 0x24, 0x16, 0x00, 0x03, 0x13, 0x09, 0x00, 0x06, 0x24, 0x10, 0x00, 0x03, 0x24, 0x13, 0x00, 0x03, 0x13, 0x09, 0x00, 0x06, 0x24, 0x11, 0x00, 0x03, 0x24, 0x10, 0x00, 0x03, 0x13, 0x09, 0x00, 0x06, 0x24, 0x12, 0x00, 0x03, 0x24, 0x0d, 0x00, 0x03, 0x13, 0x09, 0x00, 0x06, 0x24, 0x13, 0x00, 0x03, 0x24, 0x0a, 0x00, 0x03, 0x13, 0x0b, 0x00, 0x06, 0x24, 0x14, 0x00, 0x03, 0x24, 0x07, 0x00, 0x03, 0x13, 0x0c, 0x00, 0x06, 0x24, 0x15, 0x00, 0x03, 0x24, 0x04, 0x00, 0x03, 0x13, 0x2c, 0x00, 0x06, 0x24, 0x28, 0x00, 0x06, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xab, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00 };
                int j = 0;
                for (int i = 12; j < 22; i += 12)
                {
                    int trackNumber = 0;
                    int.TryParse(DuelistMusic[j].Substring(0, 2), out trackNumber);
                    if (trackNumber == 39 || trackNumber == 6)
                    {
                        trackNumber = 7;
                    }
                    var newBytes = BitConverter.GetBytes(trackNumber);
                    j++;
                    bytes[i] = newBytes[0];
                }
                //patch jump
                dataAccess.ApplyPatch(AddCustomMusicPtr, new byte[8] { 0xc0, 0xfd, 0x09, 0x08, 0x15, 0x00, 0x03, 0x24 });
                dataAccess.ApplyPatch(TaTuto_DrawTrapArea, bytes);
            }
            else
            {
                dataAccess.ApplyPatch(AddCustomMusicPtr, new byte[8] { 0x3c, 0x01, 0xe6, 0x8c, 0x15, 0x00, 0x03, 0x24 });
            }
            if (cbAllowAllCustomDuels.Checked)
            {
                //Look Into this DMK Image not updating in reverse
                dataAccess.ApplyPatch(0x197328, new byte[8] { 0x7c, 0xd1, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00 });
                dataAccess.ApplyPatch(TaTutoFocusUnit33, new byte[308] { 0x00, 0x00, 0x04, 0x24, 0x00, 0x00, 0x05, 0x24, 0x04, 0x00, 0x06, 0x24, 0x90, 0x0e, 0x08, 0x0c, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x01, 0x3c, 0x88, 0xc0, 0x38, 0x90, 0x10, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0x27, 0x03, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x18, 0x24, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x24, 0x2a, 0x70, 0x58, 0x00, 0x07, 0x00, 0xc0, 0x11, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x02, 0x24, 0x2a, 0x70, 0x02, 0x03, 0x03, 0x00, 0xc0, 0x11, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x18, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x24, 0x90, 0x0e, 0x08, 0x0c, 0x08, 0x00, 0x06, 0x24, 0x0f, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x27, 0x02, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x24, 0x04, 0x00, 0x02, 0x24, 0x2a, 0x70, 0x58, 0x00, 0x07, 0x00, 0xc0, 0x11, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x02, 0x24, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x70, 0x02, 0x03, 0x02, 0x00, 0xc0, 0x11, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x18, 0x24, 0x4e, 0x00, 0x02, 0x24, 0x1a, 0x00, 0x02, 0x03, 0x10, 0xc0, 0x00, 0x00, 0xaa, 0x00, 0x01, 0x3c, 0x88, 0xc0, 0x38, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x24, 0x90, 0x0e, 0x08, 0x0c, 0x00, 0x00, 0x04, 0x24, 0x05, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x17, 0x07, 0x0c, 0xff, 0xff, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x06, 0x24, 0x08, 0x20, 0x00, 0x72, 0x90, 0x0e, 0x08, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x1c, 0x07, 0x08 });
                dataAccess.ApplyPatch(0x195eb0, new byte[8] { 0xe8, 0xd6, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00 });
                dataAccess.ApplyPatch(TaTutoFocusInit34, new byte[604] { 0xaa, 0x00, 0x01, 0x3c, 0x88, 0xc0, 0x23, 0x80, 0x39, 0x00, 0x02, 0x24, 0x06, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x1b, 0x00, 0x05, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x24, 0x3a, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x1c, 0x00, 0x05, 0x24, 0x02, 0x00, 0x12, 0x24, 0x3b, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x1d, 0x00, 0x05, 0x24, 0x03, 0x00, 0x12, 0x24, 0x3c, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x1e, 0x00, 0x05, 0x24, 0x04, 0x00, 0x12, 0x24, 0x3d, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x1f, 0x00, 0x05, 0x24, 0x05, 0x00, 0x12, 0x24, 0x3e, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x20, 0x00, 0x05, 0x24, 0x06, 0x00, 0x12, 0x24, 0x3f, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x21, 0x00, 0x05, 0x24, 0x07, 0x00, 0x12, 0x24, 0x40, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x22, 0x00, 0x05, 0x24, 0x08, 0x00, 0x12, 0x24, 0x41, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x23, 0x00, 0x05, 0x24, 0x09, 0x00, 0x12, 0x24, 0x42, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x24, 0x00, 0x05, 0x24, 0x0a, 0x00, 0x12, 0x24, 0x43, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x25, 0x00, 0x05, 0x24, 0x0b, 0x00, 0x12, 0x24, 0x44, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x26, 0x00, 0x05, 0x24, 0x0c, 0x00, 0x12, 0x24, 0x45, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x27, 0x00, 0x05, 0x24, 0x0d, 0x00, 0x12, 0x24, 0x46, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x28, 0x00, 0x05, 0x24, 0x0e, 0x00, 0x12, 0x24, 0x47, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x29, 0x00, 0x05, 0x24, 0x0f, 0x00, 0x12, 0x24, 0x48, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x2a, 0x00, 0x05, 0x24, 0x10, 0x00, 0x12, 0x24, 0x49, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x2b, 0x00, 0x05, 0x24, 0x11, 0x00, 0x12, 0x24, 0x4a, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x2c, 0x00, 0x05, 0x24, 0x12, 0x00, 0x12, 0x24, 0x4b, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x2d, 0x00, 0x05, 0x24, 0x13, 0x00, 0x12, 0x24, 0x4c, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x2e, 0x00, 0x05, 0x24, 0x14, 0x00, 0x12, 0x24, 0x4d, 0x00, 0x02, 0x24, 0x04, 0x00, 0x62, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x64, 0x52, 0x08, 0x0c, 0x2f, 0x00, 0x05, 0x24, 0x15, 0x00, 0x12, 0x24, 0x6e, 0x17, 0x07, 0x08 });

            }
            else
            {
                dataAccess.ApplyPatch(0x197328, new byte[8] { 0x28, 0x26, 0x00, 0x72, 0x90, 0x0e, 0x08, 0x0c });
                dataAccess.ApplyPatch(0x195eb0, new byte[8] { 0xaa, 0x00, 0x01, 0x3c, 0x88, 0xc0, 0x23, 0x90 });
            }
            if (cbKeepReincarnatedCard.Checked)
            {
                dataAccess.NopInstructions(RemoveLoseCardOnReincarnation, 1);
            }
            else
            {
                dataAccess.ApplyPatch(RemoveLoseCardOnReincarnation, new byte[4] { 0x24, 0x59, 0x08, 0x0c });
            }

            new GameplayPatches.RemoveDCRequirements().ApplyOrRemove(cbNoDCRequirementPostGame.Checked);

            if (cbSideFirst.Checked)
            {
                if (cboSideFirst.SelectedIndex == -1)
                {
                    MessageBox.Show("Not a valid team to go first");
                    throw new Exception("Invalid Team");
                }
                byte sideByte = Convert.ToByte(cboSideFirst.SelectedIndex);
                //Makes White go first
                //Moves the first 7 instructions up 2 bytes to fill spares nops
                //Then the next two instructions(8th and 9th): first one loads 1 into s6, (change 0X,00,16,24 to change which team starts first)
                //Second one stores the value of s6 into s0 + 0xf92 which is TurnFirst variable
                dataAccess.ApplyPatch(MakeWhiteStart, new byte[36] {
                0x10, 0x28, 0x00, 0x00,
                0x40, 0x79, 0x07, 0x0c,
                0x01, 0x00, 0x04, 0x24,
                0x3c, 0x01, 0x04, 0x8e,
                0x40, 0x01, 0x05, 0x8e,
                0x40, 0xb7, 0x06, 0x0c,
                0x28, 0x36, 0x40, 0x72,
                sideByte, 0x00, 0x16, 0x24,
                0x92, 0x0f, 0x16, 0xa2 });
                //Patching duel act to not compare what side the player is and not who went first
                dataAccess.ApplyPatch(0x1a7b08, new byte[4] { 0x00, 0xff, 0x23, 0x92 });
            }
            else
            {
                dataAccess.ApplyPatch(MakeWhiteStart, new byte[36] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x28, 0x00, 0x00, 0x40, 0x79, 0x07, 0x0c, 0x01, 0x00, 0x04, 0x24, 0x3c, 0x01, 0x04, 0x8e, 0x40, 0x01, 0x05, 0x8e, 0x40, 0xb7, 0x06, 0x0c, 0x28, 0x36, 0x40, 0x72 });
                dataAccess.ApplyPatch(0x1a7b08, new byte[4] { 0x52, 0x0d, 0x23, 0x92 });
            }
            if (cbForceNewGameSide.Checked)
            {
                //loads 1 into a1
                dataAccess.ApplyPatch(LockTeamSelection2, new byte[4] { 0x01, 0x00, 0x05, 0x24 });

                if (cboForceNewGameSide.SelectedIndex == 1)
                {
                    //Loads a1 into has beaten White side
                    dataAccess.ApplyPatch(LockTeamSelection, new byte[4] { 0x02, 0x00, 0x25, 0xa2 });
                    dataAccess.ApplyPatch(0x1ef058, new byte[4] { 0x00, 0x00, 0x18, 0x24 });

                    //Unpatch if they previous version had Red forced first
                    dataAccess.ApplyPatch(LockTeamSelection - 4, new byte[4] { 0x01, 0x00, 0x20, 0xa2 });
                }
                else
                {
                    //Loads a1 into has beaten red side
                    dataAccess.ApplyPatch(LockTeamSelection - 4, new byte[4] { 0x01, 0x00, 0x25, 0xa2 });
                    dataAccess.ApplyPatch(0x1ef058, new byte[4] { 0x01, 0x00, 0x18, 0x24 });
                    //Unpatch if they previous version had white forced first
                    dataAccess.ApplyPatch(LockTeamSelection, new byte[4] { 0x02, 0x00, 0x20, 0xa2 });
                }

            }
            //This can be called when fast Intro is enabled but not this.
            else
            {
                //Revert Team locking
                dataAccess.ApplyPatch(LockTeamSelection2, new byte[4] { 0x94, 0x01, 0x05, 0x24 });
                dataAccess.ApplyPatch(LockTeamSelection, new byte[4] { 0x02, 0x00, 0x20, 0xa2 });
                dataAccess.ApplyPatch(LockTeamSelection - 4, new byte[4] { 0x01, 0x00, 0x20, 0xa2 });
                //If Fast is enabled patch default selection
                if(FastIntroBool)
                {
                    dataAccess.ApplyPatch(0x1ef058, new byte[4] { 0x01, 0x00, 0x18, 0x24 });
                }
                //Otherwise if its disabled DO NOTHING as fast intro will clean this area up. As this space is in fast intro's

                
            }

            if (cbLPCap.Checked)
            {
                if (numLPCap.Value > 9999)
                {
                    //Allow 5 digits on UI
                    dataAccess.ApplyPatch(MoreDigitsOnScreen, new byte[4] { 0x05, 0x00, 0x07, 0x24 });

                    //Move player details box y pos
                    dataAccess.ApplyPatch(0x1814b4, new byte[4] { 0x14, 0x00, 0x04, 0x24 });

                    //Move Player name tag
                    dataAccess.ApplyPatch(0x181ce4, new byte[4] { 0x94, 0x00, 0x03, 0x24 });

                    //Move allignment (not needed anymore but could be useful in future)
                    //Mem.PatchEx(0x201b1c64, "\x1c\x00\xf0\x26", 4);

                    //offset white rose x pos left
                    dataAccess.ApplyPatch(0x1814f8, new byte[4] { 0x90, 0x01, 0x06, 0x24 });

                    //Move Player Picture Right
                    //Mem.PatchEx(0x201b1b34, "\x18\x00\xa3\x26", 4);
                    dataAccess.ApplyPatch(0x181c2c, new byte[4] { 0x94, 0x00, 0x02, 0x24 });

                    // make LP background box wider
                    dataAccess.ApplyPatch(0x181c9c, new byte[4] { 0x0e, 0x00, 0x08, 0x24 });

                    //Make UI Wider
                    dataAccess.ApplyPatch(0x181bfc, new byte[4] { 0x2a, 0x00, 0x0a, 0x24 });
                    //Make UI Taller
                    //Mem.PatchEx(0x201b1b00, "\x10\x00\x0b\x24", 4);
                }
                //Changes stat cap function
                byte[] CapBytes = BitConverter.GetBytes((int)numLPCap.Value + 1);
                byte[] SetBytes = BitConverter.GetBytes((int)numLPCap.Value);
                //Changes the if check from 9999 to value
                dataAccess.ApplyPatch(0x2209d4, new byte[4] { CapBytes[0], CapBytes[1], 0x81, 0x28 });
                dataAccess.ApplyPatch(0x2209e0, new byte[4] { CapBytes[0], CapBytes[1], 0x81, 0x28 });
                //changes the assignment to value -1
                dataAccess.ApplyPatch(0x2209ec, new byte[4] { SetBytes[0], SetBytes[1], 0x04, 0x24 });
                //Changes SzDuel_CalcLP function
                //Changes the if check from 9999 to value
                dataAccess.ApplyPatch(0x1af61c, new byte[4] { CapBytes[0], CapBytes[1], 0x41, 0x28 });
                //changes the assignment to to value -1
                dataAccess.ApplyPatch(0x1af624, new byte[4] { SetBytes[0], SetBytes[1], 0x06, 0x24 });
            }
            else
            {
                //Force 4 digits ui
                dataAccess.ApplyPatch(MoreDigitsOnScreen, new byte[4] { 0x04, 0x00, 0x07, 0x24 });
                dataAccess.ApplyPatch(0x1814b4, new byte[4] { 0x14, 0x00, 0x04, 0x24 });
                dataAccess.ApplyPatch(0x181ce4, new byte[4] { 0x7f, 0x00, 0x03, 0x24 });
                dataAccess.ApplyPatch(0x1814f8, new byte[4] { 0xb8, 0x01, 0x06, 0x24 });
                dataAccess.ApplyPatch(0x181c2c, new byte[4] { 0x7f, 0x00, 0x02, 0x24 });
                dataAccess.ApplyPatch(0x181c9c, new byte[4] { 0x0c, 0x00, 0x08, 0x24 });
                dataAccess.ApplyPatch(0x181bfc, new byte[4] { 0x25, 0x00, 0x0a, 0x24 });
                //Set Lp cap to 9999 (makes the value 10k)
                dataAccess.ApplyPatch(0x2209d4, new byte[4] { 0x10, 0x27, 0x81, 0x28 });
                dataAccess.ApplyPatch(0x2209e0, new byte[4] { 0x10, 0x27, 0x81, 0x28 });
                dataAccess.ApplyPatch(0x2209ec, new byte[4] { 0x0f, 0x27, 0x04, 0x24 });
                dataAccess.ApplyPatch(0x1af61c, new byte[4] { 0x0f, 0x27, 0x41, 0x28 });
                dataAccess.ApplyPatch(0x1af624, new byte[4] { 0x0f, 0x27, 0x06, 0x24 });
            }
            if (cbReincarnationCount.Checked)
            {
                if (numReincarnationCount.Value != -1)
                {
                    Byte[] bytes = Patcher.ChangeReincarnationAmount.Patch;
                    bytes[0] = Convert.ToByte(numReincarnationCount.Value);
                    dataAccess.ApplyPatch(Patcher.ChangeReincarnationAmount.Offset, bytes);
                }
            }
            else
            {
                patcher.undoPatch(Patcher.ChangeReincarnationAmount);
            }
            if (cbTerrainChangeEnabled.Checked)
            {
                byte[] posBytes = BitConverter.GetBytes((int)numChangeTerrainValue.Value);
                byte[] negBytes = BitConverter.GetBytes(-(int)numChangeTerrainValue.Value);

                // D4(0th byte),FE(1st byte) = Negetive 300 change those bytes to change value of Negetive terrain
                // x2c(13th byte),x01 (14th byte) = postive 300 change those to change value of positive terrain
                dataAccess.ApplyPatch(ChangeTerrainValues, new byte[16] {
                negBytes[0], negBytes[1], 0xb5, 0x26,
                0x01, 0x00, 0x03, 0x24,
                0x04, 0x00, 0x43, 0x50,
                posBytes[0], posBytes[1], 0xb5, 0x26 });
            }
            else
            {
                dataAccess.ApplyPatch(ChangeTerrainValues, new byte[16] { 0x0c, 0xfe, 0xb5, 0x26, 0x01, 0x00, 0x03, 0x24, 0x04, 0x00, 0x43, 0x50, 0xf4, 0x01, 0xb5, 0x26 });
            }
            if(cbCrushCardChange.Checked)
            {
                RestoreCrushCardsGlory();
            }
            else
            {
                RevertCrushCard();
            }
            if (cbChangeLpRecovery.Checked)
            {
                byte[] value = BitConverter.GetBytes((uint)numLpRecoveryValue.Value);
                dataAccess.ApplyPatch(0x24268C, new byte[4] { value[0], value[1], 0x04, 0x24 });
            }
            else
            {
                dataAccess.ApplyPatch(0x24268C, new byte[4] { 0x32, 0x00, 0x04, 0x24 });
            }
        }

   
        private void ChangeSlotMusic()
        {
            //Somehow break the music to be crush battle always?
            int trackNum = Convert.ToInt32(DuelistMusic[0].Substring(0, 2));
            byte[] bytes = BitConverter.GetBytes(trackNum);
            if(trackNum >= 45)
            {
                MessageBox.Show("Slot Track Number is invalid");
            }
            dataAccess.ApplyPatch(SlotTrackPtr, new byte[4] { bytes[0], 0x00, 0x04, 0x24 });
        }

        private void RestoreCrushCardsGlory()
        {
            //Change Card Effect
            dataAccess.ApplyPatch(0x29ca68, new byte[4] { 0xfd, 0x02, 0x00, 0x00 });
            //Change Card Param
            dataAccess.ApplyPatch(0x29ca6c, new byte[4] { 0x09, 0x00, 0x02, 0x00 });

            //Change Card Type
            dataAccess.ApplyPatch(0x292f88, new byte[1] { 0x20});
        }

        private void RevertCrushCard()
        {
            //Change Card Effect
            dataAccess.ApplyPatch(0x29ca68, new byte[4] { 0x00, 0x00, 0x00, 0x00 });
            //Change Card Param
            dataAccess.ApplyPatch(0x29ca6c, new byte[4] { 0x00, 0x00, 0x00, 0x00 });

            //Change Card Type
            dataAccess.ApplyPatch(0x292f88, new byte[1] { 0x40 });
        }

        private void NopTutorialsForOtherMods()
        {
            //No Deck Requirements
            dataAccess.NopInstructions(TaTutoDbgInit34, 95);
            //AI Input Fix
            dataAccess.NopInstructions(TaTutoSetDeck35, 156);
            //All Custom Duels
            dataAccess.NopInstructions(TaTutoFocusUnit33, 120);
            dataAccess.NopInstructions(TaTutoFocusInit34, 176);
            //For slots
            dataAccess.NopInstructions(TaTutoFocusUnit032, 228);
            //For Music
            dataAccess.NopInstructions(TaTuto_DrawTrapArea, 76);
        }
        void RestoreNoppedTutorials()
        {
            dataAccess.ApplyPatch(TaTutoDbgInit34, new byte[384] { 0xd0, 0xff, 0xbd, 0x27, 0x20, 0x00, 0xbf, 0x7f, 0x10, 0x00, 0xb1, 0x7f, 0x28, 0x26, 0x00, 0x70, 0x70, 0x7a, 0x07, 0x0c, 0x00, 0x00, 0xb0, 0x7f, 0x28, 0x8e, 0x40, 0x70, 0x2a, 0x08, 0x11, 0x00, 0x09, 0x00, 0x20, 0x10, 0x28, 0x86, 0x00, 0x70, 0x28, 0x26, 0x00, 0x70, 0x30, 0x7b, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x72, 0x01, 0x00, 0x10, 0x26, 0x2a, 0x10, 0x11, 0x02, 0xfa, 0xff, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x7a, 0x07, 0x0c, 0x01, 0x00, 0x04, 0x24, 0x28, 0x86, 0x40, 0x70, 0x2a, 0x08, 0x10, 0x00, 0x09, 0x00, 0x20, 0x10, 0x28, 0x8e, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0x30, 0x7b, 0x07, 0x0c, 0x28, 0x2e, 0x20, 0x72, 0x01, 0x00, 0x31, 0x26, 0x2a, 0x10, 0x30, 0x02, 0xfa, 0xff, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x01, 0x06, 0x24, 0x28, 0x26, 0x00, 0x70, 0x00, 0x7b, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x01, 0x00, 0x05, 0x24, 0x1d, 0x01, 0x06, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x02, 0x00, 0x05, 0x24, 0x9c, 0x00, 0x06, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x03, 0x00, 0x05, 0x24, 0xf9, 0x00, 0x06, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x04, 0x00, 0x05, 0x24, 0xf9, 0x01, 0x06, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0x15, 0x00, 0x06, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0xa7, 0x01, 0x06, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0x28, 0x2e, 0x80, 0x70, 0x01, 0x00, 0x04, 0x24, 0x02, 0x00, 0x05, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0x0a, 0x02, 0x06, 0x24, 0x01, 0x00, 0x04, 0x24, 0x03, 0x00, 0x05, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0x0c, 0x00, 0x06, 0x24, 0x01, 0x00, 0x04, 0x24, 0x04, 0x00, 0x05, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0xb1, 0x01, 0x06, 0x24, 0x28, 0x86, 0x00, 0x70, 0x28, 0x26, 0x00, 0x70, 0xb0, 0x7c, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x72, 0x01, 0x00, 0x10, 0x26, 0x05, 0x00, 0x02, 0x2a, 0xfa, 0xff, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x28, 0x86, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0xb0, 0x7c, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x72, 0x01, 0x00, 0x10, 0x26, 0x05, 0x00, 0x03, 0x2a, 0xfa, 0xff, 0x60, 0x14, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xbf, 0x7b, 0x10, 0x00, 0xb1, 0x7b, 0x00, 0x00, 0xb0, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x30, 0x00, 0xbd, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
            dataAccess.ApplyPatch(TaTutoSetDeck35, new byte[624] { 0xf0, 0xff, 0xbd, 0x27, 0x98, 0x00, 0x02, 0x24, 0xff, 0xff, 0x83, 0x30, 0x7f, 0x00, 0x62, 0x10, 0x00, 0x00, 0xbf, 0x7f, 0x87, 0x00, 0x02, 0x24, 0x69, 0x00, 0x62, 0x10, 0x28, 0x26, 0x00, 0x70, 0x71, 0x00, 0x02, 0x24, 0x52, 0x00, 0x62, 0x10, 0x28, 0x26, 0x00, 0x70, 0xac, 0x00, 0x02, 0x24, 0x3b, 0x00, 0x62, 0x10, 0x28, 0x26, 0x00, 0x70, 0x5d, 0x00, 0x02, 0x24, 0x37, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x02, 0x24, 0x21, 0x00, 0x62, 0x10, 0x28, 0x26, 0x00, 0x70, 0xd0, 0x00, 0x02, 0x24, 0x0a, 0x00, 0x62, 0x10, 0x28, 0x26, 0x00, 0x70, 0x3b, 0x00, 0x02, 0x24, 0x06, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x02, 0x24, 0x03, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x10, 0x28, 0x26, 0x00, 0x70, 0x28, 0x26, 0x00, 0x70, 0x1c, 0x7c, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x41, 0x01, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x07, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x9c, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xf9, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x26, 0x01, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x62, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x28, 0x26, 0x00, 0x70, 0x1c, 0x7c, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x05, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x9c, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xf9, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x26, 0x01, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x4e, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x28, 0x26, 0x00, 0x70, 0x1c, 0x7c, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x41, 0x01, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x07, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x9c, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xf9, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xfe, 0x02, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x3a, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x28, 0x26, 0x00, 0x70, 0x1c, 0x7c, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x41, 0x01, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x07, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x9c, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xf9, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xf0, 0x02, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x26, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x28, 0x26, 0x00, 0x70, 0x1c, 0x7c, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x41, 0x01, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x07, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x9c, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xfe, 0x02, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xfe, 0x02, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x12, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x0f, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x05, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x26, 0x01, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xfe, 0x02, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xfe, 0x02, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x28, 0x26, 0x00, 0x70, 0x78, 0x7c, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x10, 0x00, 0xbd, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
            dataAccess.ApplyPatch(TaTutoFocusUnit33, new byte[480] { 0xc0, 0xff, 0xbd, 0x27, 0x10, 0x00, 0xbf, 0x7f, 0x00, 0x00, 0xb0, 0x7f, 0x28, 0x86, 0x80, 0x70, 0x28, 0x26, 0x00, 0x70, 0x04, 0xea, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x9c, 0x00, 0x03, 0x24, 0x3a, 0x00, 0x03, 0x12, 0x01, 0x00, 0x05, 0x24, 0x3a, 0x00, 0x03, 0x24, 0x04, 0x00, 0x03, 0x12, 0x28, 0x26, 0x00, 0x70, 0x66, 0x00, 0x00, 0x10, 0x10, 0x00, 0xbf, 0x7b, 0x28, 0x26, 0x00, 0x70, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x20, 0x00, 0xa5, 0x27, 0x28, 0x86, 0x40, 0x70, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0x47, 0x02, 0x24, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0x47, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x30, 0x00, 0xa1, 0xc7, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x32, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x24, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0x20, 0x00, 0xa5, 0x27, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x86, 0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0xc7, 0x02, 0x34, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0xc7, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x01, 0x00, 0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7, 0x01, 0x00, 0x05, 0x24, 0x28, 0x26, 0x00, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x10, 0x00, 0xbf, 0x7b, 0x00, 0x00, 0xb0, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x40, 0x00, 0xbd, 0x27, 0x00, 0x00, 0x00, 0x00 });
            dataAccess.ApplyPatch(TaTutoFocusInit34, new byte[704] { 0xc0, 0xff, 0xbd, 0x27, 0x10, 0x00, 0xbf, 0x7f, 0x00, 0x00, 0xb0, 0x7f, 0x28, 0x86, 0x80, 0x70, 0x28, 0x26, 0x00, 0x70, 0x04, 0xea, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x9c, 0x00, 0x03, 0x24, 0x70, 0x00, 0x03, 0x12, 0x01, 0x00, 0x05, 0x24, 0x1d, 0x00, 0x03, 0x24, 0x3a, 0x00, 0x03, 0x12, 0x01, 0x00, 0x04, 0x24, 0x70, 0x01, 0x03, 0x24, 0x04, 0x00, 0x03, 0x12, 0x01, 0x00, 0x05, 0x24, 0x99, 0x00, 0x00, 0x10, 0x10, 0x00, 0xbf, 0x7b, 0x01, 0x00, 0x05, 0x24, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0x20, 0x00, 0xa5, 0x27, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x86, 0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0x47, 0x02, 0x24, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0x47, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x01, 0x00, 0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7, 0x01, 0x00, 0x05, 0x24, 0x28, 0x26, 0x00, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x65, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x2e, 0x80, 0x70, 0x01, 0x01, 0x04, 0x24, 0x20, 0x00, 0xa5, 0x27, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x86, 0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0x47, 0x02, 0x24, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0x47, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x01, 0x01, 0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7, 0x01, 0x00, 0x04, 0x24, 0x28, 0x2e, 0x80, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x32, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x24, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0x20, 0x00, 0xa5, 0x27, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x86, 0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0xc7, 0x02, 0x34, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0xc7, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x01, 0x00, 0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7, 0x01, 0x00, 0x05, 0x24, 0x28, 0x26, 0x00, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x10, 0x00, 0xbf, 0x7b, 0x00, 0x00, 0xb0, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x40, 0x00, 0xbd, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
            dataAccess.ApplyPatch(TaTutoFocusUnit032, new byte[912] { 0xc0, 0xff, 0xbd, 0x27, 0x10, 0x00, 0xbf, 0x7f, 0x00, 0x00, 0xb0, 0x7f, 0x28, 0x86, 0x80, 0x70, 0x28, 0x26, 0x00, 0x70, 0x04, 0xea, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x03, 0x00, 0x03, 0x24, 0xa5, 0x00, 0x03, 0x12, 0x01, 0x00, 0x04, 0x24, 0x9c, 0x00, 0x03, 0x24, 0x6f, 0x00, 0x03, 0x12, 0x01, 0x00, 0x05, 0x24, 0x3a, 0x00, 0x00, 0x12, 0x01, 0x00, 0x04, 0x24, 0x3c, 0x00, 0x03, 0x24, 0x04, 0x00, 0x03, 0x12, 0x28, 0x26, 0x00, 0x70, 0xcc, 0x00, 0x00, 0x10, 0x10, 0x00, 0xbf, 0x7b, 0x28, 0x26, 0x00, 0x70, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x20, 0x00, 0xa5, 0x27, 0x28, 0x86, 0x40, 0x70, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0x47, 0x02, 0x24, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0x47, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x30, 0x00, 0xa1, 0xc7, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x98, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x00, 0x01, 0x04, 0x24, 0x20, 0x00, 0xa5, 0x27, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x86, 0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0x47, 0x02, 0x24, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0x47, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x00, 0x01, 0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7, 0x01, 0x00, 0x04, 0x24, 0x28, 0x2e, 0x00, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x65, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x24, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0x20, 0x00, 0xa5, 0x27, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x86, 0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0xc7, 0x02, 0x34, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0xc7, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x01, 0x00, 0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7, 0x01, 0x00, 0x05, 0x24, 0x28, 0x26, 0x00, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x32, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x2e, 0x80, 0x70, 0x01, 0x01, 0x04, 0x24, 0x20, 0x00, 0xa5, 0x27, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x86, 0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0x47, 0x02, 0x24, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0x47, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x01, 0x01, 0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7, 0x01, 0x00, 0x04, 0x24, 0x28, 0x2e, 0x80, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x10, 0x00, 0xbf, 0x7b, 0x00, 0x00, 0xb0, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x40, 0x00, 0xbd, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
            dataAccess.ApplyPatch(TaTuto_DrawTrapArea, new byte[304] { 0x70, 0xff, 0xbd, 0x27, 0x70, 0x00, 0xbf, 0x7f, 0x60, 0x00, 0xb6, 0x7f, 0x50, 0x00, 0xb5, 0x7f, 0x40, 0x00, 0xb4, 0x7f, 0x30, 0x00, 0xb3, 0x7f, 0x20, 0x00, 0xb2, 0x7f, 0x10, 0x00, 0xb1, 0x7f, 0xc0, 0x00, 0x03, 0x24, 0x00, 0x00, 0xb0, 0x7f, 0x8e, 0x00, 0xa3, 0xa3, 0x8d, 0x00, 0xa0, 0xa3, 0x8c, 0x00, 0xa3, 0xa3, 0x80, 0x00, 0x03, 0x24, 0x8f, 0x00, 0xa3, 0xa3, 0x62, 0x01, 0x83, 0x94, 0xff, 0x00, 0xb3, 0x30, 0x8c, 0x00, 0xb2, 0x27, 0x28, 0xae, 0xc0, 0x70, 0x28, 0xa6, 0xe0, 0x70, 0x1a, 0x00, 0x73, 0x00, 0x01, 0x00, 0x63, 0x24, 0x62, 0x01, 0x83, 0xa4, 0x10, 0x18, 0x00, 0x00, 0x23, 0x00, 0x60, 0x14, 0x28, 0xb6, 0x80, 0x70, 0x28, 0x86, 0x00, 0x70, 0x28, 0x8e, 0x00, 0x70, 0x2a, 0x08, 0x91, 0x02, 0x28, 0x2e, 0x20, 0x72, 0x0b, 0x28, 0x81, 0x02, 0x2a, 0x08, 0x34, 0x02, 0x28, 0x36, 0x20, 0x72, 0x0b, 0x30, 0x81, 0x02, 0x2a, 0x08, 0xb0, 0x02, 0x28, 0x26, 0x00, 0x72, 0x0b, 0x20, 0xa1, 0x02, 0x2a, 0x08, 0x15, 0x02, 0x28, 0x1e, 0x00, 0x72, 0x0b, 0x18, 0xa1, 0x02, 0x23, 0x20, 0x64, 0x00, 0x23, 0x18, 0xc5, 0x00, 0x21, 0x18, 0x83, 0x00, 0x02, 0x00, 0x61, 0x28, 0x08, 0x00, 0x20, 0x50, 0x01, 0x00, 0x31, 0x26, 0x01, 0x00, 0x08, 0x24, 0x28, 0x26, 0x00, 0x72, 0x28, 0x2e, 0x20, 0x72, 0x28, 0x36, 0x00, 0x70, 0x18, 0x8c, 0x07, 0x0c, 0x28, 0x3e, 0x40, 0x72, 0x01, 0x00, 0x31, 0x26, 0x07, 0x00, 0x21, 0x2a, 0xe6, 0xff, 0x20, 0x14, 0x2a, 0x08, 0x91, 0x02, 0x01, 0x00, 0x10, 0x26, 0x07, 0x00, 0x01, 0x2a, 0xe1, 0xff, 0x20, 0x14, 0x28, 0x8e, 0x00, 0x70, 0x62, 0x01, 0xc3, 0x96, 0x2a, 0x08, 0x63, 0x02, 0x02, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x62, 0x01, 0xc0, 0xa6, 0x70, 0x00, 0xbf, 0x7b, 0x60, 0x00, 0xb6, 0x7b, 0x50, 0x00, 0xb5, 0x7b, 0x40, 0x00, 0xb4, 0x7b, 0x30, 0x00, 0xb3, 0x7b, 0x20, 0x00, 0xb2, 0x7b, 0x10, 0x00, 0xb1, 0x7b, 0x00, 0x00, 0xb0, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x90, 0x00, 0xbd, 0x27, 0x00, 0x00, 0x00, 0x00 });
        }

        private bool IsUsingFastIntroMods()
        {
            return cbAddAddtionalSlotRewards.Checked || cbAIInputFix.Checked || cbUseCustomMusic.Checked || cbAllowAllCustomDuels.Checked || cbNoDCRequirementPostGame.Checked || cbFastIntro.Checked || cbForceNewGameSide.Checked;
        }

        private void SaveSlots()
        {
            if (cbAddAddtionalSlotRewards.Checked)
            {
                BindSlotRewards();
                dataAccess.ApplyPatch(AddSlotRewardsPtr, new byte[8] { 0x44, 0xc9, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00 });
                byte[] bytes = new byte[768] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd2, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x17, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x47, 0x45, 0x09, 0x08, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x02, 0x24, 0x58, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x55, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x52, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x4f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x4c, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x49, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x46, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x43, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3d, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3a, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x37, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x34, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x31, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x2e, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x2b, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x28, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x25, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x22, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x1f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x1c, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x19, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x16, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x13, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x0d, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x0a, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x07, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x03, 0x02, 0x24, 0xab, 0x45, 0x09, 0x08, 0x00, 0x00, 0x00, 0x00 };
                int j = 0;
                for (int i = 24; j < 30; i += 12)
                {
                    var newBytes = BitConverter.GetBytes(SpecialThreeInARows[j]);
                    j++;
                    bytes[i] = newBytes[0];
                    bytes[i + 1] = newBytes[1];
                }
                j = 0;
                for (int i = 400; j < 30; i += 12)
                {
                    var newBytes = BitConverter.GetBytes(SpecialSlotRewards[j]);
                    j++;
                    bytes[i] = newBytes[0];
                    bytes[i + 1] = newBytes[1];
                }
                dataAccess.ApplyPatch(TaTutoFocusUnit032, bytes);
            }
            else
            {
                dataAccess.ApplyPatch(AddSlotRewardsPtr, new byte[8] { 0xd2, 0x02, 0x02, 0x24, 0x28, 0x00, 0x62, 0x10 });
            }
        }



        private void SaveMaps()
        {
            dataAccess.SaveMaps();
        }
        private void LoadDefaultMusic()
        {
            DuelistMusic = new Dictionary<int, string>();
            for (int i = 0; i < 22; i++)
            {
                //Use Try add when updated version of c#
                DuelistMusic.Add(i, lbMusicTrack.Items[MusicList.defaultSongs[i] - 1].ToString());
            }

        }

        private void btnExtractMusic_Click(object sender, EventArgs e)
        {
            GetMusicFiles();
        }



        private void GetMusicFiles()
        {
            string MusicDirectory = Path.Combine(Directory.GetCurrentDirectory(), "Music");

            if (!Directory.Exists(MusicDirectory))
            {
                Directory.CreateDirectory(MusicDirectory);
            }

            MediaFoundationApi.Startup();
            CDReader isoFile = new CDReader(DataAccess.fileStream, true);
            // Get the file from inside the ISO
            EnableDisableSelection(false);

            for (int i = 0; i < 5; i++)
            {
                var fileEntry = isoFile.GetFiles($"SOUND\\BGM\\0{i}");
                if (fileEntry == null)
                {
                    MessageBox.Show("File not found in the ISO.");
                    return;
                }

                // Extract the file to the destination folder
                foreach (var file in fileEntry)
                {
                    if (!Path.GetFileName(file).StartsWith("00"))
                        continue;
                    string fileName = Path.GetFileName(file);
                    string extractedFilePath = Path.Combine("Music", fileName.Substring(0, fileName.Length - 2));
                    RawSourceWaveStream pcmReader;
                    using (FileStream fileStream = File.OpenWrite(extractedFilePath))
                    {
                        var pcm = isoFile.OpenFile(file, FileMode.Open);
                        pcm.CopyTo(fileStream);

                    }
                    using (FileStream fileStream = File.OpenRead(extractedFilePath))
                    {
                        string mp3FilePath = Path.Combine(MusicDirectory, Path.GetFileNameWithoutExtension(file) + ".mp3");
                        var desiredBitRate = 0; // ask for lowest available bitrate 
                        pcmReader = new RawSourceWaveStream(fileStream, new WaveFormat(48000, 16, 1));
                        MediaFoundationEncoder.EncodeToMp3(pcmReader, mp3FilePath, desiredBitRate);
                    }
                }
            }

            CleanUpPcms();
            MediaFoundationApi.Shutdown();
            EnableDisableSelection(true);
            MessageBox.Show("File extracted successfully.");
        }

        private void CleanUpPcms()
        {
            string[] pcmFiles = Directory.GetFiles(MusicDirectory, "*.pcm");
            foreach (string pcmFile in pcmFiles)
            {
                File.Delete(pcmFile);
            }
        }

        private void lbMusicDuelists_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!lbMusicTrack.Enabled)
            {
                lbMusicTrack.Enabled = true;
            }
            if (lbMusicDuelists.SelectedIndex != -1)
            {
                CurrentDuelistMusicSelected = lbMusicDuelists.SelectedIndex;
                lblCurrentlyPlayingTitle.Text = lbMusicDuelists.Items[lbMusicDuelists.SelectedIndex].ToString() + "'s current music is:";
                CurrentSongSelected = DuelistMusic[CurrentDuelistMusicSelected];
                lblCurrentMusic.Text = CurrentSongSelected;
                lbMusicTrack.SelectedIndex = lbMusicTrack.Items.IndexOf(CurrentSongSelected);
                UpdateSelectedMusic();
            }
        }
        private void lbMusicTrack_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lbMusicTrack.SelectedIndex != -1)
            {
                CurrentSongSelected = lbMusicTrack.Items[lbMusicTrack.SelectedIndex].ToString();
                lblCurrentMusic.Text = CurrentSongSelected;
                DuelistMusic[CurrentDuelistMusicSelected] = CurrentSongSelected;
                UpdateSelectedMusic();
            }
        }
        private void tbMusicVolume_ValueChanged(object sender, EventArgs e)
        {
            float volume = tbMusicVolume.Value / 50f; // Convert to a value between 0 and 1
            waveOut.Volume = volume;
        }

        private void btnToggleMusic_Click(object sender, EventArgs e)
        {
            if (CurrentSongSelected == null)
            {
                MessageBox.Show("No Music Currently Selected");
                return;
            }
            if (!isMusicPlaying)
            {
                PlaySelectedTrack();
            }
            else
            {
                StopMusic();
            }
        }

        private void UpdateSelectedMusic()
        {
            PlaySelectedTrack();

        }

        private void PlaySelectedTrack()
        {
            StopMusic();

            string selectedMp3FilePath = Path.Combine(MusicDirectory, "00" + CurrentSongSelected.Substring(0, 2) + ".mp3");
            if (File.Exists(selectedMp3FilePath))
            {
                mp3Reader = new Mp3FileReader(selectedMp3FilePath);
                
                // Toggle the play state
                btnToggleMusic.Text = "Stop";
                // Update the button text

                // Play or stop the MP3 based on the current state
                waveOut.Init(mp3Reader);
                waveOut.Play();
                isMusicPlaying = true;
            }
        }

        private void StopMusic()
        {
            if (waveOut.PlaybackState != PlaybackState.Stopped)
            {
                
                waveOut.Stop();
                mp3Reader?.Dispose();
                isMusicPlaying = false;
                btnToggleMusic.Text = "Start";
            }
        }

        void EnableDisableSelection(bool enabled)
        {

            foreach (Control c in this.Controls)
            {
                c.Enabled = enabled;
            }
            SetTabsEnabled(enabled);

        }
        public void SetTabsEnabled(bool enabled)
        {
            foreach (TabPage tabPage in mainTabControl.TabPages)
            {
                tabPage.Enabled = enabled;
            }
        }
    }

}

